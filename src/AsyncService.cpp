/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */



#include <rtac_asio/AsyncService.h>
#include <boost/bind.hpp>

namespace rtac { namespace asio {

AsyncService::AsyncService() :
    service_(std::make_unique<IoService>()),
    isRunning_(false)
{}

AsyncService::~AsyncService()
{
    this->stop();
}

//AsyncService::IoServicePtr AsyncService::io_service()
//{
//    return service_;
//}

bool AsyncService::is_running() const
{
    return isRunning_;
}

void AsyncService::start()
{
    if(this->is_running()) return;
    std::cout << "starting" << std::endl;

    if(service_->stopped())
        service_->reset();

    thread_ = std::thread(boost::bind(&boost::asio::io_service::run, service_));
    if(!thread_.joinable())
        throw std::runtime_error("Failed to start AsyncService");

    isRunning_ = true;
}

void AsyncService::stop()
{
    if(!this->is_running()) return;

    std::cout << "stopping" << std::endl;
    
    service_->stop();
    thread_.join();
    if(thread_.joinable())
        throw std::runtime_error("Failed to stop AsyncService");

    isRunning_ = false;

    std::cout << "stopped" << std::endl;
}

} //namespace asio
} //namespace rtac
