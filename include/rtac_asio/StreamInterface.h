/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */



#ifndef _DEF_RTAC_ASIO_STREAM_INTERFACE_H_
#define _DEF_RTAC_ASIO_STREAM_INTERFACE_H_

#include <memory>
#include <functional>

//#include <boost/asio.hpp>
#include <boost/system/error_code.hpp>

#include <rtac_asio/AsyncService.h>

namespace rtac { namespace asio {

class StreamInterface
{
    public:

    using Ptr      = std::shared_ptr<StreamInterface>;
    using ConstPtr = std::shared_ptr<const StreamInterface>;

    using ErrorCode = boost::system::error_code;
    using Callback  = std::function<void(const ErrorCode&, std::size_t)>;

    protected:

    AsyncService::Ptr service_;

    StreamInterface(AsyncService::Ptr service) : service_(service) {}

    public:

    AsyncService::Ptr service() const { return service_; }

    virtual void async_read_some(std::size_t bufferSize,
                                 uint8_t*    buffer,
                                 Callback    callback) const = 0;
    virtual void async_write_some(std::size_t    count,
                                  const uint8_t* data,
                                  Callback       callback) const = 0;
};

} //namespace asio
} //namespace rtac

#endif //_DEF_RTAC_ASIO_STREAM_INTERFACE_H_
