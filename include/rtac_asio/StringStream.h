/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef _DEF_RTAC_ASIO_STRING_STREAM_H_
#define _DEF_RTAC_ASIO_STRING_STREAM_H_

#include <boost/circular_buffer.hpp>

#include <rtac_asio/StreamInterface.h>

namespace rtac { namespace asio {

class StringStream : public StreamInterface
{
    public:

    using Ptr      = std::shared_ptr<StringStream>;
    using ConstPtr = std::shared_ptr<const StringStream>;

    using ErrorCode = StreamInterface::ErrorCode;
    using Callback  = StreamInterface::Callback;

    protected:

    boost::circular_buffer<uint8_t> buffer_;

    StringStream(AsyncService::Ptr service, std::size_t bufferSize) :
        StreamInterface(service),
        buffer_(bufferSize)
    {}

    public:

    static Ptr Create(AsyncService::Ptr service, std::size_t bufferSize) {
        return Ptr(new StringStream(service, bufferSize));
    }

    const auto& buffer() const { return buffer_; }

    void async_read_some(std::size_t bufferSize,
                         uint8_t*    buffer,
                         Callback    callback) override
    {
        std::size_t readCount = 0;
        for(std::size_t i = 0; i < bufferSize && buffer_.size() > 0; i++) {
            buffer[i] = buffer_.front();
            buffer_.pop_front();
            readCount++;
        }
        //callback(ErrorCode(), readCount);
        // the above line cause an infinite recursion. Using the post method
        // from the service defers the call and transforms the infinite
        // recursion in an infinite loop (which does not crash)
        this->service()->post(std::bind(callback, ErrorCode(), readCount));
    }

    void async_write_some(std::size_t    count,
                          const uint8_t* data,
                          Callback       callback)
    {
        std::size_t writtenCount = 0;
        for(std::size_t i = 0; i < count && buffer_.size() < buffer_.capacity(); i++) {
            buffer_.push_back(data[i]);
            writtenCount++;
        }

        //callback(ErrorCode(), writtenCount);
        // the above line cause an infinite recursion. Using the post method
        // from the service defers the call and transforms the infinite
        // recursion in an infinite loop (which does not crash)
        this->service()->post(std::bind(callback, ErrorCode(), writtenCount));
    }

    virtual void flush() { buffer_.clear(); }
    virtual void reset() { buffer_.clear(); }
};

} //namespace asio
} //namespace rtac


#endif //_DEF_RTAC_ASIO_STRING_STREAM_H_
